#!/usr/bin/env python

import subprocess
import sys
import re
import inspect

# List of all english prepositions
PREPOSITIONS = ["a", "abaft", "aboard", "about", "above", "absent",
    "across", "afore", "after", "against", "along", "alongside", "amid",
    "amidst", "among", "amongst", "an", "apropos", "around", "as", "aside",
    "astride", "at", "athwart", "atop", "barring", "before", "behind", "below",
    "beneath", "beside", "besides", "between", "betwixt", "beyond", "but", "by",
    "circa", "concerning", "despite", "down", "during", "except", "excluding",
    "failing", "following", "for", "from", "given", "in", "including", "inside",
    "into", "lest", "like", "mid", "midst", "minus", "modulo", "near", "next",
    "notwithstanding", "of", "off", "on", "onto", "opposite", "out", "outside",
    "over", "pace", "past", "per", "plus", "pro", "qua", "regarding", "round",
    "sans", "save", "since", "than", "through,", "throughout,", "till", "times",
    "to", "toward", "towards", "under", "underneath", "unlike", "until", "unto",
    "up", "upon", "versus", "via", "vice", "with", "within", "without",
    "worth", "through"]


class Paper(object):

    ##########################################################################
    # INTERNAL STUFF  (you can ignore these functions)
    ##########################################################################

    def __init__(self, filenames):
        self.__filenames = filenames
        self.__text = {}
        self.errors = 0

    @staticmethod
    def __flatten_paragraphs(text):
        '''Given a text where paragraphs are separated by one or more
           empty lines, it puts every paragraph in a single, separate line.
           Example:

           I like sushi
           and pie.

           I ride
           horses.

           Becomes:
           I like sushi and pie.
           I ride horses '''
        return '\n'.join(paragraph.replace('\n', ' ')
                        for paragraph in re.split("\n(\s*\n)+", text)
                        if paragraph.strip())

    def __run_all_with_prefix(self, prefix):
        for name in filter(lambda n: n.startswith(prefix), dir(self)):
            attribute = getattr(self, name)
            if inspect.ismethod(attribute):
                attribute()

    def _run_all_checks(self):
        self.__run_all_with_prefix('check_')

    def _run_all_tests(self):
        self.__run_all_with_prefix('test_')

    ##########################################################################
    # FUCTIONS THAT ARE RELEVANT FOR CHECKS WRITERS
    ##########################################################################

    def get_latex_text(self):
        ''' Returns the complete paper, with each paragraph on a single
            line. No latex/tex command is stripped '''
        try:
            return self.__latex_text
        except:
            text = ''
            for filename in self.__filenames:
                with open(filename) as f:
                    text += f.read() + '\n'
            self.__latex_text = self.__flatten_paragraphs(text)
            return self.__latex_text

    _IGNORED_ENVIRONMENTS = ("array",
                             "eqnarray",
                             "equation",
                             "figure",
                             "mathmatica",
                             "picture",
                             "table",
                             "verbatim",
                             "lstlisting")

    def get_text(self, ignored_environments=None):
        ''' Returns the textual content of the tex files, with latex/tex
        enviroments stripped. You can control the enviroments to strip via
        the 'ignored_environments' argument: if you don't, the default ones
        will be stripped'''
        if ignored_environments == None:
            ignored_environments = Paper._IGNORED_ENVIRONMENTS
        try:
            return self.__text[ignored_environments]
        except:
            text = subprocess.check_output(["detex",
                                            "-n",
                                            "-e",
                                             ','.join(ignored_environments)]
                                             + self.__filenames)
            self.__text[ignored_environments] = self.__flatten_paragraphs(
                                                                        text)
            return self.__text[ignored_environments]

    def format_re_match(self, m, text):
        start_of_sentence = max(text.rfind('\n', 0, m.start()) + 1, 0)
        end_of_sentence = text.find('\n', m.end()), len(text)
        if end_of_sentence == -1:
            end_of_sentence = len(text)
        a_string = text[max(start_of_sentence, m.start() - 10):
                        min(end_of_sentence, m.end() + 10)]
        return a_string.split('\n', 1)[0]

    def perform_test(self, function, expected_errors_num):
        self.errors = 0
        function()
        assert expected_errors_num == self.errors

    ##########################################################################
    # CHECKS
    ##########################################################################

    def check_exempli_gratia_without_comma(self):
        for m in re.finditer(r'e\.g\.[^,]',
                             self.get_text(),
                             re.MULTILINE):
            print "E.G. without comma:", self.format_re_match(m,
                                            self.get_text())
            self.errors += 1

    def test__check_exempli_gratia_without_comma(self):
        self.get_text = lambda: "e.g. a pony \n e.g. what?, e.g., cool!"
        self.perform_test(self.check_exempli_gratia_without_comma, 2)

    ##########################################################################

    def check_id_est_without_comma(self):
        for m in re.finditer(r'i\.e\.[^,]',
                             self.get_text(),
                             re.MULTILINE):
            print "I.E. without comma:", self.format_re_match(m,
                                            self.get_text())
            self.errors += 1

    def test__check_id_est_without_comma(self):
        self.get_text = lambda: "i.e. a pony \n i.e. what?, i.e., cool!"
        self.perform_test(self.check_id_est_without_comma, 2)

    ##########################################################################

    def check_quotes(self):
        for m in re.finditer(r'"',
                             self.get_text(),
                             re.MULTILINE):
            print '"hello" should be substituted with ``hello\'\':', \
                                self.format_re_match(m, self.get_text())
            self.errors += 1

    def test__check_quotes(self):
        self.get_text = lambda: '"this is not ok" ``but this is\'\''
        self.perform_test(self.check_quotes, 2)

    ##########################################################################

    def check_citing_with_unbreakeable_spaces(self):
        for keyword in ["cite", "ref"]:
            for m in re.finditer(r'(^|\s)\\' + keyword + r'\s*{',
                                 self.get_latex_text(),
                                 re.MULTILINE):
                print 'use hello~\%s{ instead of hello \%s{:' % (keyword,
                                                                 keyword), \
                            self.format_re_match(m, self.get_latex_text())
                self.errors += 1

    def test__check_citing_with_unbreakeable_spaces(self):
        self.get_latex_text = lambda: r'citing: wrong \cite{ciao} - right~\cite{ciao}'
        self.perform_test(self.check_citing_with_unbreakeable_spaces, 1)
        self.get_latex_text = lambda: r'refs done wrong \ref{ciao} - right~\ref{ciao}'
        self.perform_test(self.check_citing_with_unbreakeable_spaces, 1)

    ##########################################################################

    def check_commas_in_numbers(self):
        # We also check in tables
        text = self.get_text(ignored_environments=tuple(
                set(Paper._IGNORED_ENVIRONMENTS) - set('table')))
        for m in re.finditer('(^|[^\w\-])\d{5}', text, re.MULTILINE):
            print 'Put commas in numbers over 10,000:', \
                                self.format_re_match(m, self.get_text())
            self.errors += 1
        for m in re.finditer('[^\d]\d,\d{3}[^,]', text, re.MULTILINE):
            print "Don't put commas in numbers under 10,000:", \
                                self.format_re_match(m, self.get_text())
            self.errors += 1

    def test__check_commas_in_numbers(self):
        def get_text(*args, **kwargs): return text
        self.get_text = get_text
        text = r'10000 cats eat 10,000 mice'
        self.perform_test(self.check_commas_in_numbers, 1)
        text = r'9999 cats eat 9,999 mice'
        self.perform_test(self.check_commas_in_numbers, 1)
        text = r'1000 cats eat 999,999 mice'
        self.perform_test(self.check_commas_in_numbers, 0)
        text = r'project N10000, grant CNS-20000'
        self.perform_test(self.check_commas_in_numbers, 0)

    ##########################################################################

    def check_commas_after_quotes(self):
        for m in re.finditer("''\s*,",
                             self.get_text(),
                             re.MULTILINE):
            print "Convert ``hello'', => ``hello,'' :", \
                                self.format_re_match(m, self.get_text())
            self.errors += 1

    def test__check_commas_after_quotes(self):
        self.get_text = lambda: r"``flower'', should be ``flower,''"
        self.perform_test(self.check_commas_after_quotes, 1)

    ##########################################################################

    def check_always_capitalize(self):

        for reg in ["internet", "javascript"]:
            for m in re.finditer(reg,
                                 self.get_text(),
                                 re.MULTILINE):
                print "Always capitalize:", \
                            self.format_re_match(m, self.get_text())
                self.errors += 1

    def test__check_always_capitalize(self):
        self.get_text = lambda: r"internet"
        self.perform_test(self.check_always_capitalize, 1)

    ##########################################################################

    def check_comma_before_that(self):
        for m in re.finditer(",\s+that",
                             self.get_text(),
                             re.MULTILINE):
            print "Do not put a comma before 'that':", \
                                self.format_re_match(m, self.get_text())
            self.errors += 1

    def test__check_comma_before_that(self):
        self.get_text = lambda: r"I like cats, that eat mice"
        self.perform_test(self.check_comma_before_that, 1)
        self.get_text = lambda: r"I like cats that eat mice"
        self.perform_test(self.check_comma_before_that, 0)

    ##########################################################################

    def check_comma_before_which(self):
        for m in re.finditer("[^,\s]\s+which",
                             self.get_text(),
                             re.MULTILINE):
            word_before_start = self.get_text().rfind(' ', 0, m.start())
            word_before = re.search("\w+", self.get_text()[
                                                word_before_start + 1:
                                                m.start() + 1]).group()
            if word_before in PREPOSITIONS:
                continue
            if word_before.endswith('ing'):
                continue
            print "Put a comma before 'which':", \
                                self.format_re_match(m, self.get_text())
            self.errors += 1

    def test__check_comma_before_which(self):
        self.get_text = lambda: r"I like that cat, which eat mice"
        self.perform_test(self.check_comma_before_which, 0)
        self.get_text = lambda: r"I like that cat which eat mice"
        self.perform_test(self.check_comma_before_which, 1)

    ##########################################################################

    def check_word_before_ref_is_capitalized(self):
        text = self.get_latex_text()
        for m in re.finditer('\\\\ref', text, re.MULTILINE):
            word_before_start = max(text.rfind(' ', 0, m.start() - 2),
                                    text.rfind('~', 0, m.start() - 2))
            word_before = re.search("\w+", text[word_before_start + 1:
                                                m.start() + 1]).group()
            if not word_before in ["and"] and not word_before[0].isupper():
                print r'Capitalize the word before \ref:', \
                                    self.format_re_match(m, text)
                self.errors += 1

    def test__check_word_before_ref_is_capitalized(self):
        self.get_latex_text = lambda: "in Section \\ref{sec}, see Figure \\ref{fig}"
        self.perform_test(self.check_word_before_ref_is_capitalized, 0)
        self.get_latex_text = lambda: "in section \\ref{sec}, see figure \\ref{fig}"
        self.perform_test(self.check_word_before_ref_is_capitalized, 2)

    ##########################################################################

    def check_british_spelling(self):
        british_spellings = {"acknowledgement": "acknowledgment", "afterwards": "afterward", "arse": "ass", "backwards": "backward", "besides": "beside",
                             "cancelling": "canceling", "catalogue": "catalog", "centre": "center", "cheque": "check", "colour": "color", "dialogue": "dialog",
                             "favour": "favor", "flavour": "flavor", "forwards": "forward", "grey": "gray", "judgement": "judgment", "labour": "labor",
                             "lustre": "luster", "modelled": "modeled", "revelled": "raveled", "shovelled": "shoveled", "snivelled": "sniveled", 
                             "theatre": "theater", "towards": "toward", "travelling": "traveling", "yodelling": "yodeling"}
        for british, american in british_spellings.iteritems():
            for m in re.finditer("[^\w]+" + british + "[^\w]+", self.get_text()):
                print "Don't spell like a bugger (that's british english) -" \
                    " it's '", american, "' , not:", self.format_re_match(m, \
                    self.get_text())
                self.errors += 1

    def test__check_british_spelling(self):
        self.get_text = lambda: r"Go to the (centre) of town to pick up the best flavour colour."
        self.perform_test(self.check_british_spelling, 3)
        self.get_text = lambda: r"I am an American, therefore I am"
        self.perform_test(self.check_british_spelling, 0)
        self.get_text = lambda: r"This cheque, right here, is unacceptable. I'll have to cheque with my manager."
        self.perform_test(self.check_british_spelling, 2)
        self.get_text = lambda: r"It is hard to parse this sentence."
        self.perform_test(self.check_british_spelling, 0)

    ##########################################################################

    def check_misplelled_standard_phrases(self):
        mispellings = {"in more details": "in more detail"}
        for wrong, right in mispellings.iteritems():
            for m in re.finditer("[^\w]+" + wrong + "[^\w]+", self.get_text()):
                print "Mispelled standard phrase - '", wrong, "' should be '", \
                    right, "' in:", self.format_re_match(m, self.get_text())
                self.errors += 1

    def test__check_misplelled_standard_phrases(self):
        self.get_text = lambda: r"I'll discuss this in more details in section"
        self.perform_test(self.check_misplelled_standard_phrases, 1)

    ##########################################################################

    def check_is_comprised_of(self):
        for m in re.finditer("([^\w]+|^)is[\s]+comprised[\s]+of[^\w]+", self.get_text(), flags=re.IGNORECASE):
            print "Don't use 'is comprised of'. Bugs book segment 75.", self.format_re_match(m, self.get_text())
            self.errors += 1

    def test__check_is_comprised_of(self):
        self.get_text = lambda: r"Adam is comprised of a brain and a stomach."
        self.perform_test(self.check_is_comprised_of, 1)
        self.get_text = lambda: r"Adam comprises a brain and a stomach."
        self.perform_test(self.check_is_comprised_of, 0)
        self.get_text = lambda: r"You don't know what that is. Comprised. Of."
        self.perform_test(self.check_is_comprised_of, 0)
        self.get_text = lambda: r"Is comprised of blah and bloop."
        self.perform_test(self.check_is_comprised_of, 1)
        self.get_text = lambda: r"Adam is awesome. Is comprised of blah and bloop."
        self.perform_test(self.check_is_comprised_of, 1)


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print """Usage:
 - chrisper *.tex

 - chrisper test
      Runs the test suite.
        """
        sys.exit(0)

    if sys.argv[1] == "test":
        Paper(sys.argv[2:])._run_all_tests()
        print "\n=== ALL TESTS PASSED ==="
    else:
        paper = Paper(sys.argv[1:])
        paper._run_all_checks()
        if paper.errors == 0:
            print '=== IT LOOKS GOOD TO ME. CONGRATS! ==='
        else:
            print "\n=== I'VE FOUND %d ISSUES ===" % paper.errors
            sys.exit(1)
